{"version":3,"file":"index.esm.js","sources":["../src/filterField.ts","../src/useSelectedLanguageIds.ts","../src/LanguageFilterStudioContext.tsx","../src/usePaneLanguages.ts","../src/LanguageFilterMenuButton.tsx","../src/LanguageFilterObjectInput.tsx","../src/plugin.tsx"],"sourcesContent":["import type {SchemaType} from 'sanity'\n\nimport type {FilterFieldFunction, LanguageFilterConfig, LanguageFilterSchema} from './types'\n\nexport const defaultFilterField: FilterFieldFunction = (\n  enclosingType,\n  field,\n  selectedLanguageIds,\n) => !enclosingType.name.startsWith('locale') || selectedLanguageIds.includes(field.name)\n\nexport function isLanguageFilterEnabled(\n  schemaType: SchemaType | undefined,\n  options: LanguageFilterConfig,\n): boolean {\n  const schemaFilter =\n    isDocument(schemaType) && (schemaType as LanguageFilterSchema)?.options?.languageFilter\n  const defaultEnabled = !options.documentTypes\n\n  return !!(\n    (defaultEnabled && schemaFilter !== false) ||\n    (!defaultEnabled && schemaFilter) ||\n    (schemaType && options.documentTypes?.includes(schemaType.name))\n  )\n}\n\nfunction isDocument(schemaType?: SchemaType) {\n  return schemaType?.jsonType === 'object' && getRootType(schemaType).name === 'document'\n}\n\nfunction getRootType(schema: SchemaType): SchemaType {\n  if (schema.type) {\n    return getRootType(schema.type)\n  }\n  return schema\n}\n","import {useState} from 'react'\n\nimport type {Language, LanguageFilterConfig} from './types'\nconst storageKey = '@sanity/plugin/language-filter/selected-languages'\n\nexport function getPersistedLanguageIds(options: LanguageFilterConfig): string[] {\n  const selectableLangs = getSelectableLanguages(options).map((l) => l.id)\n\n  let selected: string[] = selectableLangs\n  try {\n    const persistedValue = window.localStorage.getItem(storageKey)\n    if (persistedValue) {\n      selected = JSON.parse(persistedValue)\n    }\n  } catch (err) {} // eslint-disable-line no-empty\n\n  // constrain persisted/selected languages to the ones currently supported\n  selected = intersection(selected, selectableLangs)\n  return selected\n}\n\nexport function persistLanguageIds(languageIds: string[]): void {\n  window.localStorage.setItem(storageKey, JSON.stringify(languageIds))\n}\n\nfunction intersection(array1: string[], array2: string[]) {\n  return array1.filter((value) => array2.includes(value))\n}\n\nexport function getSelectableLanguages({\n  supportedLanguages,\n  defaultLanguages,\n}: LanguageFilterConfig): Language[] {\n  return Array.isArray(supportedLanguages)\n    ? supportedLanguages.filter((lang) => !defaultLanguages?.includes(lang.id))\n    : []\n}\n\nexport function useSelectedLanguageIds(\n  options: LanguageFilterConfig,\n): [string[], (ids: string[]) => void] {\n  return useState(() => [...(options.defaultLanguages ?? []), ...getPersistedLanguageIds(options)])\n}\n","import {createContext, useContext, useEffect, useMemo, useState} from 'react'\nimport {type LayoutProps, useClient} from 'sanity'\n\nimport {defaultFilterField} from './filterField'\nimport type {\n  Language,\n  LanguageCallback,\n  LanguageFilterConfig,\n  LanguageFilterConfigProcessed,\n} from './types'\nimport {useSelectedLanguageIds} from './useSelectedLanguageIds'\n\nexport interface LanguageFilterStudioContextProps {\n  // eslint-disable-next-line react/require-default-props\n  options: Required<LanguageFilterConfig>\n}\n\nexport interface LanguageFilterStudioContextProcessed {\n  options: Required<LanguageFilterConfigProcessed>\n}\n\nexport interface LanguageFilterStudioContextValue extends LanguageFilterStudioContextProcessed {\n  selectedLanguageIds: string[]\n  setSelectedLanguageIds: (ids: string[]) => void\n}\n\nexport const defaultContextValue: LanguageFilterStudioContextValue = {\n  options: {\n    apiVersion: '2022-11-27',\n    supportedLanguages: [],\n    defaultLanguages: [],\n    documentTypes: [],\n    filterField: defaultFilterField,\n  },\n  selectedLanguageIds: [],\n  setSelectedLanguageIds: () => console.error('LanguageFilterStudioContext not initialized'),\n}\n\nconst LanguageFilterStudioContext =\n  createContext<LanguageFilterStudioContextValue>(defaultContextValue)\n\n/**\n * This is a separate Provider from the Context that wraps the document pane\n * but it used to listen to changes to the selected language IDs inside it\n * and provide them to a Studio-wide context\n */\nexport function LanguageFilterStudioProvider(\n  props: LayoutProps & LanguageFilterStudioContextProps,\n) {\n  const client = useClient({apiVersion: '2023-01-01'})\n  const [languages, setLanguages] = useState<Language[]>(\n    Array.isArray(props.options.supportedLanguages) ? props.options.supportedLanguages : [],\n  )\n  useEffect(() => {\n    let asyncLanguages: Language[] = []\n\n    async function getLanguages(supportedLanguagesCallback: LanguageCallback) {\n      asyncLanguages = await supportedLanguagesCallback(client, {})\n      setLanguages(asyncLanguages)\n    }\n\n    if (!Array.isArray(props.options.supportedLanguages)) {\n      getLanguages(props.options.supportedLanguages)\n    }\n  }, [client, props.options.supportedLanguages])\n\n  const options = useMemo<Required<LanguageFilterConfigProcessed>>(() => {\n    return {\n      ...defaultContextValue.options,\n      ...props.options,\n      supportedLanguages: languages,\n    }\n  }, [props.options, languages])\n\n  const [selectedLanguageIds, setSelectedLanguageIds] = useSelectedLanguageIds(options)\n\n  return (\n    <LanguageFilterStudioContext.Provider\n      value={{options, selectedLanguageIds, setSelectedLanguageIds}}\n    >\n      {props.renderDefault(props)}\n    </LanguageFilterStudioContext.Provider>\n  )\n}\n\n/**\n * Retrieves plugin options and the currently selected\n * language IDs from anywhere in the Studio\n */\nexport function useLanguageFilterStudioContext() {\n  return useContext(LanguageFilterStudioContext)\n}\n","import {useCallback, useMemo} from 'react'\n\nimport {useLanguageFilterStudioContext} from './LanguageFilterStudioContext'\nimport {getSelectableLanguages, persistLanguageIds} from './useSelectedLanguageIds'\n\nconst unique = (arr: string[]) => Array.from(new Set(arr))\n\nexport function usePaneLanguages(): {\n  activeLanguages: string[]\n  allSelected: boolean\n  selectAll: () => void\n  selectNone: () => void\n  toggleLanguage: (languageId: string) => void\n} {\n  const {selectedLanguageIds, setSelectedLanguageIds, options} = useLanguageFilterStudioContext()\n  const {defaultLanguages = []} = options\n\n  const selectableLanguages = useMemo(() => getSelectableLanguages(options), [options])\n\n  const updateSelectedIds = useCallback(\n    (ids: string[]) => {\n      setSelectedLanguageIds(unique([...defaultLanguages, ...ids]))\n      persistLanguageIds(unique([...defaultLanguages, ...ids]))\n    },\n    [defaultLanguages, setSelectedLanguageIds],\n  )\n\n  const selectAll = useCallback(\n    () => updateSelectedIds(selectableLanguages.map((l) => l.id)),\n    [updateSelectedIds, selectableLanguages],\n  )\n\n  const selectNone = useCallback(() => {\n    updateSelectedIds(defaultLanguages)\n  }, [defaultLanguages, updateSelectedIds])\n\n  const toggleLanguage = useCallback(\n    (languageId: string) => {\n      let lang = selectedLanguageIds\n\n      if (lang.includes(languageId)) {\n        lang = lang.filter((l) => l !== languageId)\n      } else {\n        lang = unique([...lang, languageId])\n      }\n\n      updateSelectedIds(lang)\n    },\n    [updateSelectedIds, selectedLanguageIds],\n  )\n\n  const activeLanguages = useMemo(\n    () => unique([...(defaultLanguages ?? []), ...selectedLanguageIds]),\n    [defaultLanguages, selectedLanguageIds],\n  )\n\n  return {\n    activeLanguages,\n    allSelected:\n      selectedLanguageIds.length === selectableLanguages.length + defaultLanguages.length,\n    selectAll,\n    selectNone,\n    toggleLanguage,\n  }\n}\n","import {\n  CheckmarkCircleIcon,\n  CircleIcon,\n  EyeClosedIcon,\n  EyeOpenIcon,\n  TranslateIcon,\n} from '@sanity/icons'\nimport {\n  Badge,\n  Box,\n  Button,\n  Card,\n  Flex,\n  Popover,\n  Stack,\n  Text,\n  TextInput,\n  useClickOutside,\n} from '@sanity/ui'\nimport {type FormEvent, type MouseEventHandler, useCallback, useState} from 'react'\nimport {TextWithTone} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useLanguageFilterStudioContext} from './LanguageFilterStudioContext'\nimport {usePaneLanguages} from './usePaneLanguages'\n\nconst StyledBox = styled(Box)`\n  max-height: calc(100vh - 200px);\n`\n\nexport function LanguageFilterMenuButton() {\n  const {options} = useLanguageFilterStudioContext()\n\n  const defaultLanguages = options.supportedLanguages.filter((l) =>\n    options.defaultLanguages?.includes(l.id),\n  )\n\n  const languageOptions = options.supportedLanguages.filter(\n    (l) => !options.defaultLanguages?.includes(l.id),\n  )\n  const [open, setOpen] = useState(false)\n  const {activeLanguages, allSelected, selectAll, selectNone, toggleLanguage} = usePaneLanguages()\n  const [button, setButton] = useState<HTMLElement | null>(null)\n  const [popover, setPopover] = useState<HTMLElement | null>(null)\n\n  const handleToggleAll: MouseEventHandler<HTMLButtonElement> = useCallback(\n    (event) => {\n      const checked = event.currentTarget.value === 'ALL'\n\n      if (checked) {\n        selectAll()\n      } else {\n        selectNone()\n      }\n    },\n    [selectAll, selectNone],\n  )\n\n  const handleClick = useCallback(() => setOpen((o) => !o), [])\n\n  const handleClickOutside = useCallback(() => setOpen(false), [])\n\n  useClickOutside(handleClickOutside, [button, popover])\n\n  const langCount = options.supportedLanguages.length\n\n  // Search filter query\n  const [query, setQuery] = useState('')\n  const handleQuery = useCallback((event: FormEvent<HTMLInputElement>) => {\n    if (event.currentTarget.value) {\n      setQuery(event.currentTarget.value)\n    } else {\n      setQuery('')\n    }\n  }, [])\n\n  const showSearch = langCount > 4\n\n  const content = (\n    <StyledBox overflow=\"auto\">\n      <Stack padding={1} space={1}>\n        {defaultLanguages.length > 0 && (\n          <>\n            {defaultLanguages.map((l) => (\n              <LanguageFilterOption key={l.id} id={l.id} title={l.title} selected />\n            ))}\n            <Card borderTop />\n          </>\n        )}\n\n        <Button\n          mode=\"bleed\"\n          onClick={handleToggleAll}\n          justify=\"flex-start\"\n          value={allSelected ? 'NONE' : 'ALL'}\n          disabled={!!query}\n        >\n          <Flex gap={3} align=\"center\">\n            <Text size={2}>\n              {allSelected ? (\n                <TextWithTone tone=\"primary\">\n                  <EyeClosedIcon />\n                </TextWithTone>\n              ) : (\n                <EyeOpenIcon />\n              )}\n            </Text>\n            <Box flex={1}>\n              <Text>{allSelected ? 'Hide all' : 'Show all'}</Text>\n            </Box>\n          </Flex>\n        </Button>\n\n        {showSearch ? (\n          <TextInput onChange={handleQuery} value={query} placeholder=\"Filter languages\" />\n        ) : (\n          <Card borderTop />\n        )}\n\n        {languageOptions\n          .filter((language) => {\n            if (query) {\n              return language.title.toLowerCase().includes(query.toLowerCase())\n            }\n            return true\n          })\n          .map((lang) => (\n            <LanguageFilterOption\n              id={lang.id}\n              key={lang.id}\n              onToggle={toggleLanguage}\n              selected={activeLanguages.includes(lang.id)}\n              title={lang.title}\n            />\n          ))}\n      </Stack>\n    </StyledBox>\n  )\n\n  const buttonText =\n    activeLanguages.length === langCount\n      ? 'Showing all'\n      : `Showing ${activeLanguages.length} / ${langCount}`\n  return (\n    <Popover animate content={content} open={open} portal ref={setPopover}>\n      <Button\n        text={buttonText}\n        icon={TranslateIcon}\n        mode=\"bleed\"\n        onClick={handleClick}\n        ref={setButton}\n        selected={open}\n      />\n    </Popover>\n  )\n}\n\nfunction LanguageFilterOption(props: {\n  id: string\n  selected: boolean\n  title: string\n  // eslint-disable-next-line react/require-default-props\n  onToggle?: (id: string) => void\n}) {\n  const {id, onToggle, selected, title} = props\n\n  const handleChange = useCallback(() => {\n    if (onToggle) {\n      onToggle(id)\n    }\n  }, [id, onToggle])\n\n  const disabled = !onToggle\n\n  return (\n    <Button mode=\"bleed\" onClick={handleChange} justify=\"flex-start\" disabled={disabled}>\n      <Flex gap={3} align=\"center\">\n        <Text size={2}>\n          {selected ? (\n            <TextWithTone tone={disabled ? 'default' : 'positive'}>\n              <CheckmarkCircleIcon />\n            </TextWithTone>\n          ) : (\n            <CircleIcon />\n          )}\n        </Text>\n        <Box flex={1}>\n          <Text>{title}</Text>\n        </Box>\n        <Badge>{id}</Badge>\n      </Flex>\n    </Button>\n  )\n}\n","import {useMemo} from 'react'\nimport {type ObjectInputProps, type ObjectMember, useFormValue, useSchema} from 'sanity'\n\nimport {isLanguageFilterEnabled} from './filterField'\nimport {useLanguageFilterStudioContext} from './LanguageFilterStudioContext'\n\n// First check that this Object is in a schema type for which language-filter is enabled\nexport function FilteredObjectWrapper(props: ObjectInputProps) {\n  const {options} = useLanguageFilterStudioContext()\n\n  const documentType = useFormValue(['_type']) as string\n  const schema = useSchema()\n  const languageFilterEnabled = isLanguageFilterEnabled(schema.get(documentType), options)\n  return languageFilterEnabled ? <FilteredObjectInput {...props} /> : props.renderDefault(props)\n}\n\n// Modify the object members based on selected languages in the filter\nexport function FilteredObjectInput(props: ObjectInputProps) {\n  const {members: membersProp, schemaType, renderDefault, ...restProps} = props\n  const {selectedLanguageIds, options} = useLanguageFilterStudioContext()\n  const {filterField} = options\n\n  const members: ObjectMember[] = useMemo(() => {\n    return membersProp\n      .filter((member) => {\n        return (\n          (member.kind === 'field' && filterField(schemaType, member, selectedLanguageIds)) ||\n          member.kind === 'fieldSet' ||\n          member.kind === 'error'\n        )\n      })\n      .map((member) => {\n        if (member.kind === 'fieldSet') {\n          return {\n            ...member,\n            fieldSet: {\n              ...member.fieldSet,\n              members: member.fieldSet.members.filter((fieldsetMember) => {\n                return (\n                  fieldsetMember.kind === 'field' &&\n                  filterField(schemaType, fieldsetMember, selectedLanguageIds)\n                )\n              }),\n            },\n          }\n        }\n        return member\n      })\n  }, [schemaType, membersProp, filterField, selectedLanguageIds])\n\n  return renderDefault({...restProps, members, schemaType, renderDefault})\n}\n","import {\n  definePlugin,\n  type DocumentLanguageFilterComponent,\n  isObjectSchemaType,\n  type ObjectInputProps,\n} from 'sanity'\n\nimport {isLanguageFilterEnabled} from './filterField'\nimport {LanguageFilterMenuButton} from './LanguageFilterMenuButton'\nimport {FilteredObjectWrapper} from './LanguageFilterObjectInput'\nimport {defaultContextValue, LanguageFilterStudioProvider} from './LanguageFilterStudioContext'\nimport type {LanguageFilterConfig} from './types'\n\n/**\n * ## Usage in sanity.config.ts (or .js)\n *\n * ```\n * import {defineConfig} from 'sanity'\n * import {languageFilter} from '@sanity/language-filter'\n *\n * export const defineConfig({\n *     /...\n *     plugins: [\n *         languageFilter({\n *             supportedLanguages: [\n *               {id: 'nb', title: 'Norwegian (Bokmål)'},\n *               {id: 'nn', title: 'Norwegian (Nynorsk)'},\n *               {id: 'en', title: 'English'},\n *               {id: 'es', title: 'Spanish'},\n *               {id: 'arb', title: 'Arabic'},\n *               {id: 'pt', title: 'Portuguese'},\n *               //...\n *             ],\n *             // Select Norwegian (Bokmål) by default\n *             defaultLanguages: ['nb'],\n *             // Only show language filter for document type `page` (schemaType.name)\n *             // Can also enable via document-options: options.languageFilter: true\n *             documentTypes: ['page'],\n *             // default filter function shown\n *             filterField: (enclosingType, field, selectedLanguageIds) =>\n *               !enclosingType.name.startsWith('locale') || selectedLanguageIds.includes(field.name),\n *        })\n *    ]\n * })\n * ```\n */\nexport const languageFilter = definePlugin<LanguageFilterConfig>((options) => {\n  const RenderLanguageFilter: DocumentLanguageFilterComponent = () => {\n    return <LanguageFilterMenuButton />\n  }\n\n  const pluginOptions = {\n    ...defaultContextValue.options,\n    ...options,\n  }\n\n  return {\n    name: '@sanity/language-filter',\n    studio: {\n      components: {\n        layout: (props) => LanguageFilterStudioProvider({...props, options: pluginOptions}),\n      },\n    },\n\n    document: {\n      unstable_languageFilter: (prev, {schemaType, schema}) => {\n        if (isLanguageFilterEnabled(schema.get(schemaType), options)) {\n          return [...prev, RenderLanguageFilter]\n        }\n        return prev\n      },\n    },\n\n    form: {\n      components: {\n        input: (props) => {\n          if (props.id !== 'root' && isObjectSchemaType(props.schemaType)) {\n            return FilteredObjectWrapper(props as ObjectInputProps)\n          }\n\n          return props.renderDefault(props)\n        },\n      },\n    },\n  }\n})\n"],"names":["defaultFilterField","enclosingType","field","selectedLanguageIds","name","startsWith","includes","isLanguageFilterEnabled","schemaType","options","_a","_b","schemaFilter","jsonType","getRootType","isDocument","languageFilter","defaultEnabled","documentTypes","schema","type","storageKey","getPersistedLanguageIds","selectableLangs","getSelectableLanguages","map","l","id","selected","persistedValue","window","localStorage","getItem","JSON","parse","err","array2","filter","value","supportedLanguages","defaultLanguages","Array","isArray","lang","defaultContextValue","apiVersion","filterField","setSelectedLanguageIds","console","error","LanguageFilterStudioContext","createContext","LanguageFilterStudioProvider","props","client","useClient","languages","setLanguages","useState","useEffect","asyncLanguages","async","supportedLanguagesCallback","getLanguages","useMemo","__spreadProps","useSelectedLanguageIds","jsx","Provider","children","renderDefault","useLanguageFilterStudioContext","useContext","unique","arr","from","Set","usePaneLanguages","selectableLanguages","updateSelectedIds","useCallback","ids","languageIds","setItem","stringify","selectAll","selectNone","toggleLanguage","languageId","activeLanguages","allSelected","length","StyledBox","styled","Box","LanguageFilterMenuButton","languageOptions","open","setOpen","button","setButton","popover","setPopover","handleToggleAll","event","currentTarget","handleClick","o","handleClickOutside","useClickOutside","langCount","query","setQuery","handleQuery","showSearch","content","overflow","jsxs","Stack","padding","space","Fragment","LanguageFilterOption","title","Card","borderTop","Button","mode","onClick","justify","disabled","Flex","gap","align","Text","size","TextWithTone","tone","EyeClosedIcon","EyeOpenIcon","flex","TextInput","onChange","placeholder","language","toLowerCase","onToggle","buttonText","Popover","animate","portal","ref","text","icon","TranslateIcon","handleChange","CheckmarkCircleIcon","CircleIcon","Badge","FilteredObjectInput","members","membersProp","restProps","__objRest","member","kind","__spreadValues","fieldSet","fieldsetMember","definePlugin","RenderLanguageFilter","pluginOptions","studio","components","layout","document","unstable_languageFilter","prev","get","form","input","isObjectSchemaType","documentType","useFormValue","useSchema","FilteredObjectWrapper"],"mappings":"ymBAIO,MAAMA,EAA0C,CACrDC,EACAC,EACAC,KACIF,EAAcG,KAAKC,WAAW,WAAaF,EAAoBG,SAASJ,EAAME,MAEpE,SAAAG,EACdC,EACAC,GAZF,IAAAC,EAAAC,EAcQ,MAAAC,EAWR,SAAoBJ,GACX,MAAyB,kBAAzBA,WAAYK,WAA0D,aAAjCC,EAAYN,GAAYJ,IACtE,CAZIW,CAAWP,KAAgB,OAAAE,EAAA,MAAAF,OAAA,EAAAA,EAAqCC,cAAS,EAAAC,EAAAM,gBACrEC,GAAkBR,EAAQS,cAEhC,SACGD,IAAmC,IAAjBL,IACjBK,GAAkBL,GACnBJ,GAAc,OAAAG,EAAAF,EAAQS,gBAARP,EAAuBL,SAASE,EAAWJ,MAE9D,CAMA,SAASU,EAAYK,GACnB,OAAIA,EAAOC,KACFN,EAAYK,EAAOC,MAErBD,CACT,CC/BA,MAAME,EAAa,oDAEZ,SAASC,EAAwBb,GAChC,MAAAc,EAAkBC,EAAuBf,GAASgB,KAAKC,GAAMA,EAAEC,KAErE,IAAIC,EAAqBL,EACrB,IACF,MAAMM,EAAiBC,OAAOC,aAAaC,QAAQX,GAEjDQ,IAAAD,EAAWK,KAAKC,MAAML,UAEjBM,GAAK,CAGH,OAQ2BC,EARJb,EAAvBK,EAAaA,EASVS,QAAQC,GAAUF,EAAO9B,SAASgC,KARzCV,EAOT,IAAwCQ,CANxC,CAUO,SAASZ,GAAuBe,mBACrCA,EAAAC,iBACAA,IAEA,OAAOC,MAAMC,QAAQH,GACjBA,EAAmBF,QAAQM,KAA4B,MAAlBH,GAAkBA,EAAAlC,SAASqC,EAAKhB,OACrE,EACN,2YCVO,MAAMiB,EAAwD,CACnEnC,QAAS,CACPoC,WAAY,aACZN,mBAAoB,GACpBC,iBAAkB,GAClBtB,cAAe,GACf4B,YAAa9C,GAEfG,oBAAqB,GACrB4C,uBAAwB,IAAMC,QAAQC,MAAM,gDAGxCC,EACJC,EAAgDP,GAO3C,SAASQ,EACdC,GAEM,MAAAC,EAASC,EAAU,CAACV,WAAY,gBAC/BW,EAAWC,GAAgBC,EAChCjB,MAAMC,QAAQW,EAAM5C,QAAQ8B,oBAAsBc,EAAM5C,QAAQ8B,mBAAqB,IAEvFoB,GAAU,KACR,IAAIC,EAA6B,GAOtBnB,MAAAC,QAAQW,EAAM5C,QAAQ8B,qBALjCsB,eAA4BC,GAC1BF,QAAuBE,EAA2BR,EAAQ,CAAA,GAC1DG,EAAaG,EAAc,CAI3BG,CAAaV,EAAM5C,QAAQ8B,mBAAkB,GAE9C,CAACe,EAAQD,EAAM5C,QAAQ8B,qBAE1B,MAAM9B,EAAUuD,GAAiD,KACxDC,gBACFrB,EAAoBnC,SACpB4C,EAAM5C,eAFJ,CAGL8B,mBAAoBiB,UAErB,GAAA,CAACH,EAAM5C,QAAS+C,KAEZrD,EAAqB4C,GDpCvB,SACLtC,GAEA,OAAOiD,GAAS,KAzClB,IAAAhD,EAyCyB,MAAA,IAAI,OAAAA,IAAQ8B,kBAAR9B,EAA4B,MAAQY,EAAwBb,GAAQ,GACjG,CCgCwDyD,CAAuBzD,GAG3E,OAAA0D,EAACjB,EAA4BkB,SAA5B,CACC9B,MAAO,CAAC7B,UAASN,sBAAqB4C,0BAErCsB,SAAAhB,EAAMiB,cAAcjB,IAG3B,CAMO,SAASkB,IACd,OAAOC,EAAWtB,EACpB,CCtFA,MAAMuB,EAAUC,GAAkBjC,MAAMkC,KAAK,IAAIC,IAAIF,IAE9C,SAASG,IAOR,MAAA1E,oBAACA,yBAAqB4C,EAAwBtC,QAAAA,GAAW8D,KACzD/B,iBAACA,EAAmB,IAAM/B,EAE1BqE,EAAsBd,GAAQ,IAAMxC,EAAuBf,IAAU,CAACA,IAEtEsE,EAAoBC,GACvBC,IFCE,IAA4BC,EEA7BnC,EAAuB0B,EAAO,IAAIjC,KAAqByC,KFA1BC,EECVT,EAAO,IAAIjC,KAAqByC,IFAvDnD,OAAOC,aAAaoD,QAAQ9D,EAAYY,KAAKmD,UAAUF,GEAK,GAE1D,CAAC1C,EAAkBO,IAGfsC,EAAYL,GAChB,IAAMD,EAAkBD,EAAoBrD,KAAKC,GAAMA,EAAEC,OACzD,CAACoD,EAAmBD,IAGhBQ,EAAaN,GAAY,KAC7BD,EAAkBvC,EAAgB,GACjC,CAACA,EAAkBuC,IAEhBQ,EAAiBP,GACpBQ,IACC,IAAI7C,EAAOxC,EAGTwC,EADOA,EAAArC,SAASkF,GACT7C,EAAKN,QAAQX,GAAMA,IAAM8D,IAEzBf,EAAO,IAAI9B,EAAM6C,IAG1BT,EAAkBpC,EAAI,GAExB,CAACoC,EAAmB5E,IAQf,MAAA,CACLsF,gBANsBzB,GACtB,IAAMS,EAAO,UAAKjC,IAAoB,MAAQrC,KAC9C,CAACqC,EAAkBrC,IAKnBuF,YACEvF,EAAoBwF,SAAWb,EAAoBa,OAASnD,EAAiBmD,OAC/EN,YACAC,aACAC,iBAEJ,CCtCA,MAAMK,EAAYC,EAAOC,EAAG;;EAIrB,SAASC,IACd,MAAMtF,QAACA,GAAW8D,IAEZ/B,EAAmB/B,EAAQ8B,mBAAmBF,QAAQX,IAjC9D,IAAAhB,EAkCY,OAAR,OAAQA,EAAAD,EAAA+B,uBAAkB,EAAA9B,EAAAJ,SAASoB,EAAEC,GAAA,IAGjCqE,EAAkBvF,EAAQ8B,mBAAmBF,QAChDX,IAtCL,IAAAhB,EAsCW,QAAC,OAAAA,EAAQD,EAAA+B,mBAAkB9B,EAAAJ,SAASoB,EAAEC,IAAA,KAExCsE,EAAMC,GAAWxC,GAAS,IAC3B+B,gBAACA,EAAAC,YAAiBA,EAAaL,UAAAA,EAAAC,WAAWA,iBAAYC,GAAkBV,KACvEsB,EAAQC,GAAa1C,EAA6B,OAClD2C,EAASC,GAAc5C,EAA6B,MAErD6C,EAAwDvB,GAC3DwB,IAC+C,QAA9BA,EAAMC,cAAcnE,MAGlC+C,IAEAC,GAAW,GAGf,CAACD,EAAWC,IAGRoB,EAAc1B,GAAY,IAAMkB,GAASS,IAAOA,KAAI,IAEpDC,EAAqB5B,GAAY,IAAMkB,GAAQ,IAAQ,IAE7DW,EAAgBD,EAAoB,CAACT,EAAQE,IAE7C,MAAMS,EAAYrG,EAAQ8B,mBAAmBoD,QAGtCoB,EAAOC,GAAYtD,EAAS,IAC7BuD,EAAcjC,GAAawB,IACrBA,EAAAC,cAAcnE,MACtB0E,EAASR,EAAMC,cAAcnE,OAE7B0E,EAAS,GAAE,GAEZ,IAEGE,EAAaJ,EAAY,EAEzBK,EACHhD,EAAAyB,EAAA,CAAUwB,SAAS,OAClB/C,SAACgD,EAAAC,GAAMC,QAAS,EAAGC,MAAO,EACvBnD,SAAA,CAAiB7B,EAAAmD,OAAS,GAEtB0B,EAAAI,EAAA,CAAApD,SAAA,CAAA7B,EAAiBf,KAAKC,GACpByC,EAAAuD,GAAgC/F,GAAID,EAAEC,GAAIgG,MAAOjG,EAAEiG,MAAO/F,UAAQ,GAAxCF,EAAEC,MAE9BwC,EAAAyD,EAAK,CAAAC,WAAS,OAInB1D,EAAC2D,EAAA,CACCC,KAAK,QACLC,QAASzB,EACT0B,QAAQ,aACR3F,MAAOoD,EAAc,OAAS,MAC9BwC,WAAYnB,EAEZ1C,WAAC8D,EAAA,CAAKC,IAAK,EAAGC,MAAM,SAClBhE,SAAA,CAAAF,EAACmE,EAAK,CAAAC,KAAM,EACTlE,SAAAqB,IACE8C,EAAa,CAAAC,KAAK,UACjBpE,SAACF,EAAAuE,EAAc,MAGjBvE,EAACwE,GAAY,KAGhBxE,EAAA2B,GAAI8C,KAAM,EACTvE,WAACiE,EAAM,CAAAjE,SAAAqB,EAAc,WAAa,oBAKvCwB,EACE/C,EAAA0E,EAAU,CAAAC,SAAU7B,EAAa3E,MAAOyE,EAAOgC,YAAY,qBAE3D5E,EAAAyD,EAAA,CAAKC,WAAS,IAGhB7B,EACE3D,QAAQ2G,IACHjC,GACKiC,EAASrB,MAAMsB,cAAc3I,SAASyG,EAAMkC,iBAItDxH,KAAKkB,GACJwB,EAACuD,EAAA,CACC/F,GAAIgB,EAAKhB,GAETuH,SAAU3D,EACV3D,SAAU6D,EAAgBnF,SAASqC,EAAKhB,IACxCgG,MAAOhF,EAAKgF,OAHPhF,EAAKhB,WAUhBwH,EACJ1D,EAAgBE,SAAWmB,EACvB,cACA,WAAWrB,EAAgBE,YAAYmB,IAE3C,OAAA3C,EAACiF,GAAQC,SAAO,EAAClC,UAAkBlB,OAAYqD,QAAM,EAACC,IAAKjD,EACzDjC,SAAAF,EAAC2D,EAAA,CACC0B,KAAML,EACNM,KAAMC,EACN3B,KAAK,QACLC,QAAStB,EACT6C,IAAKnD,EACLxE,SAAUqE,KAIlB,CAEA,SAASyB,EAAqBrE,GAOtB,MAAA1B,GAACA,WAAIuH,EAAUtH,SAAAA,EAAA+F,MAAUA,GAAStE,EAElCsG,EAAe3E,GAAY,KAC3BkE,GACFA,EAASvH,EAAE,GAEZ,CAACA,EAAIuH,IAEFhB,GAAYgB,EAElB,SACGpB,EAAA,CAAOC,KAAK,QAAQC,QAAS2B,EAAc1B,QAAQ,aAAaC,WAC/D7D,WAAC8D,EAAA,CAAKC,IAAK,EAAGC,MAAM,SAClBhE,SAAA,CAAAF,EAACmE,GAAKC,KAAM,EACTlE,SACCzC,EAACuC,EAAAqE,GAAaC,KAAMP,EAAW,UAAY,WACzC7D,SAACF,EAAAyF,EAAoB,CAAA,KAGvBzF,EAAC0F,GAAW,KAGf1F,EAAA2B,EAAI,CAAA8C,KAAM,EACTvE,SAACF,EAAAmE,EAAA,CAAMjE,eAERF,EAAA2F,GAAOzF,SAAG1C,QAInB,mlBChLO,SAASoI,GAAoB1G,GACsC,MAAA3C,EAAA2C,GAAxD2G,QAAAC,EAAazJ,WAAAA,EAAA8D,cAAYA,GAA+B5D,EAAbwJ,EAAAC,GAAazJ,EAAb,CAApD,UAAsB,aAAY,mBACnCP,oBAACA,EAAAM,QAAqBA,GAAW8D,KACjCzB,YAACA,GAAerC,EAEhBuJ,EAA0BhG,GAAQ,IAC/BiG,EACJ5H,QAAQ+H,GAEY,UAAhBA,EAAOC,MAAoBvH,EAAYtC,EAAY4J,EAAQjK,IAC5C,aAAhBiK,EAAOC,MACS,UAAhBD,EAAOC,OAGV5I,KAAK2I,GACgB,aAAhBA,EAAOC,KACFpG,GAAAqG,GAAA,CAAA,EACFF,GADE,CAELG,SAAUtG,GACLqG,GAAA,CAAA,EAAAF,EAAOG,UADF,CAERP,QAASI,EAAOG,SAASP,QAAQ3H,QAAQmI,GAEb,UAAxBA,EAAeH,MACfvH,EAAYtC,EAAYgK,EAAgBrK,SAM3CiK,KAEV,CAAC5J,EAAYyJ,EAAanH,EAAa3C,IAE1C,OAAOmE,EAAcL,GAAIqG,GAAA,GAAAJ,GAAJ,CAAeF,UAASxJ,aAAY8D,kBAC3D,0ZCLa,MAAAtD,GAAiByJ,GAAoChK,IAC1D,MAAAiK,EAAwD,IACpDvG,EAAA4B,EAAA,CAAyB,GAG7B4E,EAAgBL,GAAAA,GAAA,CAAA,EACjB1H,EAAoBnC,SACpBA,GAGE,MAAA,CACLL,KAAM,0BACNwK,OAAQ,CACNC,WAAY,CACVC,OAASzH,IAAUD,kBAAiCC,WAAJ,CAAW5C,QAASkK,YAAc,IAItFI,SAAU,CACRC,wBAAyB,CAACC,GAAOzK,aAAYW,YACvCZ,EAAwBY,EAAO+J,IAAI1K,GAAaC,GAC3C,IAAIwK,EAAMP,GAEZO,GAIXE,KAAM,CACJN,WAAY,CACVO,MAAQ/H,GACW,SAAbA,EAAM1B,IAAiB0J,EAAmBhI,EAAM7C,YDrEvD,SAA+B6C,GACpC,MAAM5C,QAACA,GAAW8D,IAEZ+G,EAAeC,EAAa,CAAC,UAGnC,OAD8BhL,EADfiL,IAC8CN,IAAII,GAAe7K,GACjD0D,EAAC4F,GAAwBO,GAAA,CAAA,EAAAjH,IAAYA,EAAMiB,cAAcjB,EAC1F,CC+DmBoI,CAAsBpI,GAGxBA,EAAMiB,cAAcjB,KAInC"}